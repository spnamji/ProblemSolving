#  <1928. Base64 Decoder>
# 문제 요약
# 1. 표1을 보고 입력받은 문자들을 각각 대응하는 숫자로 변경한다.
# 2. 각 숫자들을 6자리 이진수로 표현하고, 이 이진수들을 한 줄로 쭉 이어 붙인다.
# 3. 한 줄로 쭉 이어붙인 이진수들을 8자리씩 끊어서 십진수로 바꾼다.
# 4. 각각의 십진수를 아스키 코드로 변환한다.

# 1) 24bit 버퍼에 1byte씩 3byte 문자를 집어넣는다.  => 한 문자 당 8bit의 크기를 가지고, 24bit 버퍼 크기에 3개 문자를 넣어 표현
# 2) 버퍼의 위쪽부터 6비트씩 잘라 값을 읽고, 각 값을 표의 문자로 Encoding 한다. => 24bit 버퍼 상 3개 문자에서 8bit가 아닌 6bit씩 나눠서 제공된 표에 따라 4개(24/6) 문자로 변환 후 반환한다. 문제에서 제공한 각 테스트케이스 문자가 이를 표현한 것이다.

# [해결 방법]
# 1) 제공된 표와 문자가 일치하도록 리스트에 저장(인덱스 번호를 반환받음)
# 2) 각 문자에 대응되는 숫자를 추출해 2진수로 변환하고 모든 2진수를 한 줄로 저장 (2진수는 6비트이다)
# 3) 저장된 2진수를 8비트씩 끊어 10진수로 변환하고 10진수를 아스키코드로 변환하여 출력한다.

decode = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L','M','N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e','f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/']

T = int(input())
for test_case in range(1, T + 1):
    value = '' # 이진수를 넣는 공간
    word = input() # 문자열을 입력받음

    for i in word: # word의 값을 하나씩 반복하면서 이진수로 변환
        num = decode.index(i) # word의 문자를 인덱스 위치로 변환
        bit_num = str(bin(num)[2:]) # 앞에 ob가 붙으므로

        while len(bit_num)<6: # 비트를 6자리로 맞춰준다.
            bit_num = '0'+bit_num
        value += bit_num

    result = '' # 구하고자하는 원래의 문장
    for j in range(0, len(value), 8): # 저장되어있는 2진수 문자열을 8자리씩 끊어서 반복함
        data = chr(int(value[j:j+8], 2)) # 8비트를 정수로 변환(2진수를 변환하는거라 ,2), 10진수룰 아스키 코드에 해당하는 문자로 변환하기 위해 chr사용.
        result += data
print('#{} {}'.format(test_case, result))


# num[2:] 하면 앞에 2글자를 자르고 시작한다
# 리스트.index(찾을 값) : 찾고자 하는 값의 인덱스 넘버 반환
# int(값, 진수) : 정수로 변환할 값의 진수를 넣을 수 있다.
# 10진수를 아스키코드로 변환하기 위해서 chr을 사용.(str은 문자열)
